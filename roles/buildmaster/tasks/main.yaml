---
- name: Create Rustbuild user
  user:
      name: "rustbuild"
      home: "/home/rustbuild"
      shell: /bin/bash
      createhome: yes

- name: Install prerequisite packages
  apt:
      pkg={{ item }}
      state=present
      update_cache=yes
  with_items:
      - git
      - libffi-dev
      - libssl-dev
      - python
      - python-dev
      - python-openssl
      - python-pip
      - python-setuptools
      - python-virtualenv
      - python3
      - ruby
      - s3cmd
      - stunnel

- name: Check whether Buildbot was cloned yet
  stat:
    path=/home/rustbuild/rust-buildbot
  register: buildbot_already_cloned

- name: Clone the Buildbot configs
  git:
      repo='https://github.com/rust-lang/rust-buildbot.git'
      dest='/home/rustbuild/rust-buildbot'
      version=master
      accept_hostkey=yes
      force=yes
  become: yes
  become_user: rustbuild
  when: noclone == False

# Separate because Homu is python3
- name: Create a python3 virtualenv for Homu
  command: virtualenv -p python3 /home/rustbuild/homu-venv
  args:
    creates: /home/rustbuild/homu-venv
  become: yes
  become_user: rustbuild

- name: Install Homu to his virtualenv
  pip:
    virtualenv=/home/rustbuild/homu-venv
    name="-e git+https://github.com/barosl/homu@master#egg=homu-master"

- name: Create homu directory
  file:
    path=/home/rustbuild/homu
    state=directory
  become: yes
  become_user: rustbuild

- name: Make Homu's config file
  template:
    src=homu.cfg.j2
    dest=/home/rustbuild/homu/cfg.toml
    mode=0640
  become: yes
  become_user: rustbuild

- name: Create Buildbot virtualenv and install packages
  pip:
    virtualenv=/home/rustbuild/buildmaster-venv
    name="{{ item }}"
  with_items:
    - buildbot==0.8.10
    - twisted==14.0.0
    - boto
    - pyopenssl
    - cryptography
  become: yes
  become_user: rustbuild

- name: Template secrets into passwords.py
  template:
    src=passwords.py.j2
    dest=/home/rustbuild/rust-buildbot/master/passwords.py
    mode=0640
  become: yes
  become_user: rustbuild

- name: Template files into master directory
  template:
    src="{{ item }}.j2"
    dest="/home/rustbuild/rust-buildbot/master/{{ item }}"
    mode=0640
  become: yes
  become_user: rustbuild
  with_items:
    - master.cfg.txt
    - slave-list.txt

- name: Template files into rust-buildbot directory
  template:
    src="{{ item }}.j2"
    dest="/home/rustbuild/rust-buildbot/{{ item }}"
    mode=0640
  become: yes
  become_user: rustbuild
  with_items:
    - rust-bot-cert.pem
    - rust-bot-sign-passphrase
    - rust-bot-privkey.pem
    - rust-bot-sign-pubkey.asc

- name: Template values into .s3cfg
  template:
    src=s3cfg.j2
    dest=/home/rustbuild/.s3cfg
    mode=0640
  become: yes
  become_user: rustbuild

- name: Make .ec2 directory
  file:
    path=/home/rustbuild/.ec2
    state=directory
    owner="rustbuild"

- name: Put AWS creds where Buildbot wants them
  template:
    src=aws_id.j2
    dest=/home/rustbuild/.ec2/aws_id
    mode=0640
  become: yes
  become_user: rustbuild

- name: Nuke twistd.pid if we're going to upgrade master
  file:
    path=/home/rustbuild/rust-buildbot/master/twistd.pid
    state=absent
  when: buildbot_already_cloned.stat.exists == False

- name: Buildbot upgrade-master, only on first run
  command: /home/rustbuild/buildmaster-venv/bin/buildbot upgrade-master /home/rustbuild/rust-buildbot/master
  become: yes
  become_user: rustbuild
  when: buildbot_already_cloned.stat.exists == False

- name: Start stunnel
  command: stunnel4 rust-buildbot-master-stunnel.conf
  args:
    chdir: /home/rustbuild/rust-buildbot/
  become: yes
  become_user: rustbuild

- name: Start Buildbot
  command: /home/rustbuild/buildmaster-venv/bin/buildbot start master
  args:
      chdir: /home/rustbuild/rust-buildbot
  become: yes
  become_user: rustbuild

- name: Configure crontab to start buildbot
  cron:
    name="buildbot start"
    special_time=reboot
    user="rustbuild"
    job="{{item}}"
  with_items:
    - "cd ~/rust-buildbot && stunnel4 rust-buildbot-master-stunnel.conf"
    - "cd ~/rustbuildbot/master && /home/rustbuild/buildmaster-venv/bin/buildbot start"

- name: Place invalidate.sh and update-rust-dist-index.sh in homedir
  copy:
    src="{{ item }}"
    dest="/home/rustbuild/{{ item }}"
    owner='rustbuild'
  with_items:
    - invalidate.sh
    - update-rust-dist-index.sh

- name: Clone s3 invalidator repo
  git:
      repo='https://github.com/nagisa/s3-directory-listing.git'
      dest='/home/rustbuild/s3-directory-listing'
      version=master
      accept_hostkey=yes
      force=yes
  become: yes
  become_user: rustbuild

- name: Template s3 invalidator config file
  template:
    src=s3_directory_listing.cfg.j2
    dest=/home/rustbuild/s3-directory-listing/config.toml
    mode=0640
  become: yes
  become_user: rustbuild

- name: Create crontab entries to run dist update and invalidation in prod
  cron:
    name="Run {{ item }}"
    state=present
    job="{{ item }}"
    user="rustbuild"
    hour=13
  with_items:
    - "sh ~/invalidate.sh"
    - "sh ~/update-rust-dist-index.sh"
  when: master_cfg_txt.env == "prod"

# TODO FIXME: Start stunnels if necessary
